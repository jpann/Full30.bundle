def MetadataObjectForURL(url):
    page = HTML.ElementFromURL(url)

    title = page.xpath("//head//meta[@property='og:title']")[0].get('content')
    description = page.xpath("//head//meta[@property='og:description']")[0].get('content')
    thumb = page.xpath("//head//meta[@property='og:image']")[0].get('content')

    Log('Title: {0}'.format(title))    

    return VideoClipObject(
        title = title,
        summary = description,
        thumb = thumb
        )     

def MediaObjectsForURL(url):
    return [
        MediaObject(
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            container = Container.MP4,
            audio_channels = 2,
            video_resolution = '640',
            optimized_for_streaming = True,
            parts = [PartObject(key=Callback(PlayVideo, url = url))]
        )
    ]

REGEX_VIDEO_URL = Regex('type=\'video/mp4; codecs="avc1.64001E, mp4a.40.2"\' src="(?P<video_url>[^"]+)"')
@indirect
def PlayVideo(url):
    Log('PlayVideo: ' + url)

    page = HTTP.Request(url).content

    Log('HTML: ' + page)
    
    video_url = REGEX_VIDEO_URL.search(page).group('video_url')
    
    Log('VideoUrl: ' + video_url)

    if not video_url:
        raise Ex.MediaNotAvailable

    return IndirectResponse(VideoClipObject, key=video_url)

