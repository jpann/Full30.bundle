import httplib
import json
from datetime import datetime
from scrape import GetPage as GetPage
from scrape import GetThumb as GetThumb
from utils import RemoveTags as RemoveTags

def MetadataObjectForURL(url):
    Log.Info('MetadataObjectForURL  url = ' + url)

    content = GetPage(url)

    if not content:
        return None
        
    data = json.loads(content)
    
    if not data:
        return None

    title = data['data'][0]['meta']['title']
    description = data['data'][0]['meta']['description']
    pub_date = datetime.strptime(data['data'][0]['meta']['publication_date'], '%m/%d/%Y')

    thumb = data['data'][0]['images']['thumbnails'][0]
    if thumb.startswith('http') == False:
        thumb = 'https://www.full30.com' + data['data'][0]['images']['thumbnails'][0]

    # Remove markup from desc
    description = RemoveTags(description)

    return VideoClipObject(
        title = title,
        summary = description,
        thumb = Callback(GetThumb, url=thumb),
        originally_available_at = pub_date.date(),
	    year = pub_date.year,
        )     

def MediaObjectsForURL(url):
    Log.Info('MediaObjectsForURL - url = ' + url)

    return [
        MediaObject(
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            container = Container.MP4,
            audio_channels = 2,
            optimized_for_streaming = True,
            parts = [PartObject(key=Callback(PlayVideo, url = url))]
        )
    ]

@indirect
def PlayVideo(url):
    Log.Info('PlayVideo - url = ' + url)

    video_url = GetVideoUrl(url)

    if not video_url:
        raise Ex.MediaNotAvailable

    Log.Info('PlayVideo: video_url = ' + video_url)

    return IndirectResponse(VideoClipObject, key=video_url)

def GetVideoUrl(url):
    Log.Info('GetVideoUrl - url = ' + url)

    content = GetPage(url)

    if not content:
        Log.Info('GetVideoUrl: no content returned')
        return None
        
    data = json.loads(content)
    
    if not data:
        Log.Info('GetVideoUrl: no json found')
        return None

    mp4_url = "https:" + data['data'][0]['transforms']['mp4']['resolutions']['854x480']

    # If mp4_url contains /None/ then we have to try to get the video url from another source
    if "/None/" in mp4_url:
        b64_id = data['data'][0]['meta']['b64_id']

        outside_url = "https://preflight.epicio.net/api/manifest/{0}".format(b64_id)

        Log.Info('GetVideoUrl: video url seems incorrect, trying new url; url = ' + mp4_url)

        outside_content = GetPage(outside_url)

        if not outside_content:
            Log.Info('GetVideoUrl: outside url contains no data')
            return None
        
        outside_data = json.loads(outside_content)
        if not outside_data:
            Log.Info('GetVideoUrl: outside url contains no json')
            return None

        # check if status is valid
        if outside_data['meta']['status'] == "SUCCESS":
            mp4_url = outside_data['resolutions'][0]['src']
        else:
            return None

    return mp4_url

